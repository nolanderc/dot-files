" ========================
" Loading Plugins (load-plugins)
" ========================

" Load the plugin manager
if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
  silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Begin loading plugins
call plug#begin('~/.local/share/nvim/plugged')

" === Themes ===
" Load the onedark theme
Plug 'joshdick/onedark.vim'


" === Languages ===

" GENERAL
" Language Server integration
Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }

" MARKDOWN
Plug 'gabrielelana/vim-markdown'

" LATEX
Plug 'lervag/vimtex'

" RUST
Plug 'rust-lang/rust.vim'

" === Completion ===
Plug 'roxma/nvim-yarp'
Plug 'ncm2/ncm2'

" === Files ===
Plug 'wincent/Command-T'

" Stop loading plugins
call plug#end()

" ========================
" Configure Plugins (conf-plugin)
" ========================

" Configure ncm2
au User Ncm2Plugin call ncm2#register_source({                                    
      \ 'name' : 'vimtex',                                                  
      \ 'priority': 1,                                                      
      \ 'subscope_enable': 1,                                               
      \ 'complete_length': 1,                                               
      \ 'scope': ['tex'],                                                   
      \ 'mark': 'tex',                                                      
      \ 'word_pattern': '\w+',                                              
      \ 'complete_pattern': g:vimtex#re#ncm,                               
      \ 'matcher': {'name': 'prefix', 'key': 'word'}, 
      \ 'on_complete': ['ncm2#on_complete#omni',                            
      \ 'vimtex#complete#omnifunc'],                                          
      \ })                                                           
au BufEnter * call ncm2#enable_for_buffer()                                       
set completeopt=noinsert,menuone,noselect

imap <C-Space> <Plug>(ncm2_manual_trigger)

" Use <TAB> to select the popup menu:
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"


" MARKDOWN
let vim_markdown_preview_pandoc=1

" JAVA
autocmd FileType java setlocal omnifunc=javacomplete#Complete

" RUST
" Set files ending with *.rs to rust source
autocmd BufReadPost *.rs setlocal filetype=rust

" LANGUAGE SERVER
" Start the Rust Language Server
let g:LanguageClient_serverCommands = {
    \ 'rust': ['rustup', 'run', 'stable', 'rls'],
    \ }

" Automatically start language server
let g:LanguageClient_autoStart = 1

" Always show hover information as echo
let g:LanguageClient_hoverPreview = "Never"

" ========================
" General Configuration (conf-general)
" ========================

" Set tab width to 4 spaces
set tabstop=2

" When changing indent with < and > change by 4 spaces
set shiftwidth=2
set softtabstop=2

" Use spaces over tabs
set expandtab

" Render tabs as arrows
set list
set listchars=tab:>-


" Soft wrap of lines
set breakindent   " Indent wrapped lines to the same indentation as their parent
set linebreak     " Wrap lines on whole words
set showbreak=\ \ " Indent wrapped lines by two spaces


" Disable search highlight
set nohlsearch

" Enable 

" Set the current theme
syntax on
set background = "dark"
colorscheme onedark 

" Make the hightlight color less distracting
hi QuickFixLine cterm=italic,bold ctermfg=NONE ctermbg=NONE


" Set relative line numbers
set number relativenumber

" Enable persintent undo history
set undofile
set undodir=~/.vim/undodir


" Disable code folding
set nofoldenable

" Automatically create the file's parent directory if necessary
function! s:MkNonExDir(file, buf)
  if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
    let dir=fnamemodify(a:file, ':h')
    if !isdirectory(dir)
      call mkdir(dir, 'p')
    endif
  endif
endfunction
augroup BWCCreateDir
  autocmd!
  autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END 


" Only complete the common part in wildmenu
set wildmode=longest:full,full

" Disable <leader> timeout
set notimeout

" ========================
" Key Mappings (conf-key-map)
" ========================

" Disable the arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>

noremap <C-Up> <NOP>
noremap <C-Down> <NOP>
noremap <C-Left> <NOP>
noremap <C-Right> <NOP>

inoremap <C-Up> <NOP>
inoremap <C-Down> <NOP>
inoremap <C-Left> <NOP>
inoremap <C-Right> <NOP>

" Treat wrapped lines as hard lines
noremap j gj
noremap k gk

" Navigate panes using ctrl + movement
noremap <C-h> <C-W>h
noremap <C-l> <C-W>l
noremap <C-j> <C-W>j
noremap <C-k> <C-W>k

" Disable the Ctrl+C command to get to normal mode
inoremap <C-C> <NOP>

" Disable Ex mode
noremap Q <NOP>


" Navigate quick fixes
noremap [q :Cprev<CR>
noremap ]q :Cnext<CR>

" ========================
" Custom commands (conf-commands)
" ========================

" Save as sudo
command! W w !sudo tee "%" > /dev/null 

" Make cnext and cprevious wrap around
command! Cnext try | cnext | catch | cfirst | catch | endtry
command! Cprev try | cprev | catch | clast | catch | endtry

" command! PrevWindow <C-W><C-P>
